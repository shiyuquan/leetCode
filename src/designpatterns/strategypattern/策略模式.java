/**
 * 策略模式 包
 *
 * 其思想是针对一组算法，将每一种算法都封装到具有共同接口的独立的类中，从而是它们可以相互替换。策略模式的最大特点是使得
 * 算法可以在不影响客户端的情况下发生变化，从而改变不同的功能。
 *
 * 策略模式体现了面向对象程序设计中非常重要的两个原则：
 * -- 封装变化的概念。
 * -- 编程中使用接口，而不是使用的是具体的实现类(面向接口编程)。
 *
 * 组成
 * 抽象策略角色：这个是一个抽象的角色，通常情况下使用接口或者抽象类去实现。对比来说，就是我们的Comparator接口。
 * 具体策略角色：包装了具体的算法和行为。对比来说，就是实现了Comparator接口的实现一组实现类。
 * 环境角色：    内部会持有一个抽象角色的引用，给客户端调用。
 *
 * 与 工厂模式的 差异
 * -- 用途不一样
 * 工厂是创建型模式,它的作用就是创建对象；
 * 策略是行为型模式,它的作用是让一个对象在许多行为中选择一种行为;
 *
 * -- 关注点不一样
 * 一个关注对象创建
 * 一个关注行为的封装
 *
 * -- 解决不同的问题
 * 工厂模式是创建型的设计模式，它接受指令，创建出符合要求的实例；它主要解决的是资源的统一分发，将对象的创建完全独立出来，让对象的创建和具体的使用客户无关。主要应用在多数据库选择，类库文件加载等。
 * 策略模式是为了解决的是策略的切换与扩展，更简洁的说是定义策略族，分别封装起来，让他们之间可以相互替换，策略模式让策略的变化独立于使用策略的客户。
 *
 * 工厂相当于黑盒子，策略相当于白盒子；
 *
 * @author shiyuquan
 * Create Time: 2019/8/6 20:48
 */
package designpatterns.strategypattern;